# strategies/estrategia_combinacao_digitos.py

from datetime import datetime, timedelta

# --- Metadados Obrigat√≥rios ---
ID = "combinacao_digitos_vizinhos"
NOME = "Combina√ß√£o de D√≠gitos"
DESCRICAO = "Ap√≥s um Branco, combina o √∫ltimo d√≠gito do n√∫mero anterior com o primeiro d√≠gito do n√∫mero posterior para gerar um alvo."
EMOJI = "üß©"

# --- Fun√ß√µes Auxiliares da Estrat√©gia ---

def _get_last_digit(roll):
    """Retorna o √∫ltimo d√≠gito de um n√∫mero. Ex: 14 -> 4"""
    return roll % 10

def _get_first_digit(roll):
    """Retorna o primeiro d√≠gito de um n√∫mero. Ex: 14 -> 1, 7 -> 7"""
    if roll < 10:
        return roll
    return int(str(roll)[0])

# --- Fun√ß√£o Principal de Verifica√ß√£o ---

def verificar(historico, cursor):
    """
    Verifica a sequ√™ncia [N√∫mero Anterior] - [Branco] - [N√∫mero Posterior]
    e aplica a l√≥gica de combina√ß√£o de d√≠gitos.
    """
    
    # 1. CONDI√á√ÉO DE GATILHO
    # Precisa de pelo menos 3 resultados no hist√≥rico, e o do meio deve ser um Branco.
    # O gatilho real √© o n√∫mero que sai AP√ìS o Branco.
    if len(historico) < 3 or historico[1]['color'] != 'Branco':
        return None

    # 2. EXTRA√á√ÉO DOS DADOS
    resultado_posterior = historico[0]
    resultado_branco = historico[1]
    resultado_anterior = historico[2]

    horario_base = datetime.strptime(resultado_posterior['timestamp_iso'], "%Y-%m-%d %H:%M:%S")

    # 3. APLICA√á√ÉO DA L√ìGICA
    # Pega o √∫ltimo d√≠gito do n√∫mero anterior
    last_digit_anterior = _get_last_digit(resultado_anterior['roll'])
    # Pega o primeiro d√≠gito do n√∫mero posterior
    first_digit_posterior = _get_first_digit(resultado_posterior['roll'])

    # Combina os d√≠gitos como strings e depois converte para inteiro
    alvo_minuto_combinado = int(f"{last_digit_anterior}{first_digit_posterior}")

    # 4. TRATAMENTO DE MINUTOS > 59
    # O operador '%' (m√≥dulo) resolve isso de forma elegante. 
    # Ex: 11 % 60 = 11.  91 % 60 = 31.
    minuto_final = alvo_minuto_combinado % 60

    # 5. C√ÅLCULO DO HOR√ÅRIO FINAL DO ALVO
    # Define o alvo para o minuto calculado na hora atual
    horario_alvo = horario_base.replace(minute=minuto_final, second=0, microsecond=0)

    # Se o hor√°rio calculado j√° passou, avan√ßa para a pr√≥xima hora
    if horario_alvo <= horario_base:
        horario_alvo += timedelta(hours=1)

    # 6. FORMATA√á√ÉO DO RETORNO
    mensagem_contexto = (
        f"Combina√ß√£o: {resultado_anterior['roll']} (final {last_digit_anterior}) + "
        f"{resultado_posterior['roll']} (inicial {first_digit_posterior}) -> Alvo : {minuto_final:02d}"
    )

    return {
        "trigger_id": resultado_posterior['id'],
        "message": mensagem_contexto,
        "targets": [horario_alvo]
    }